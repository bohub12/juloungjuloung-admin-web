/* tslint:disable */
/* eslint-disable */
/**
 * juju Admin API
 * juju Admin API Restdocs
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiResponseBoolean
 */
export interface ApiResponseBoolean {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseBoolean
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseBoolean
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiResponseBoolean
     */
    'data'?: boolean;
    /**
     * 
     * @type {PageResponse}
     * @memberof ApiResponseBoolean
     */
    'pageResponse'?: PageResponse;
}
/**
 * 
 * @export
 * @interface ApiResponseGetPreSignedUrlResponse
 */
export interface ApiResponseGetPreSignedUrlResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseGetPreSignedUrlResponse
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseGetPreSignedUrlResponse
     */
    'message': string;
    /**
     * 
     * @type {GetPreSignedUrlResponse}
     * @memberof ApiResponseGetPreSignedUrlResponse
     */
    'data'?: GetPreSignedUrlResponse;
    /**
     * 
     * @type {PageResponse}
     * @memberof ApiResponseGetPreSignedUrlResponse
     */
    'pageResponse'?: PageResponse;
}
/**
 * 
 * @export
 * @interface ApiResponseListLong
 */
export interface ApiResponseListLong {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseListLong
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseListLong
     */
    'message': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ApiResponseListLong
     */
    'data'?: Array<number>;
    /**
     * 
     * @type {PageResponse}
     * @memberof ApiResponseListLong
     */
    'pageResponse'?: PageResponse;
}
/**
 * 
 * @export
 * @interface ApiResponseListProductColorResponse
 */
export interface ApiResponseListProductColorResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseListProductColorResponse
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseListProductColorResponse
     */
    'message': string;
    /**
     * 
     * @type {Array<ProductColorResponse>}
     * @memberof ApiResponseListProductColorResponse
     */
    'data'?: Array<ProductColorResponse>;
    /**
     * 
     * @type {PageResponse}
     * @memberof ApiResponseListProductColorResponse
     */
    'pageResponse'?: PageResponse;
}
/**
 * 
 * @export
 * @interface ApiResponseListProductImageResponse
 */
export interface ApiResponseListProductImageResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseListProductImageResponse
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseListProductImageResponse
     */
    'message': string;
    /**
     * 
     * @type {Array<ProductImageResponse>}
     * @memberof ApiResponseListProductImageResponse
     */
    'data'?: Array<ProductImageResponse>;
    /**
     * 
     * @type {PageResponse}
     * @memberof ApiResponseListProductImageResponse
     */
    'pageResponse'?: PageResponse;
}
/**
 * 
 * @export
 * @interface ApiResponseListProductMaterialResponse
 */
export interface ApiResponseListProductMaterialResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseListProductMaterialResponse
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseListProductMaterialResponse
     */
    'message': string;
    /**
     * 
     * @type {Array<ProductMaterialResponse>}
     * @memberof ApiResponseListProductMaterialResponse
     */
    'data'?: Array<ProductMaterialResponse>;
    /**
     * 
     * @type {PageResponse}
     * @memberof ApiResponseListProductMaterialResponse
     */
    'pageResponse'?: PageResponse;
}
/**
 * 
 * @export
 * @interface ApiResponseListProductResponse
 */
export interface ApiResponseListProductResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseListProductResponse
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseListProductResponse
     */
    'message': string;
    /**
     * 
     * @type {Array<ProductResponse>}
     * @memberof ApiResponseListProductResponse
     */
    'data'?: Array<ProductResponse>;
    /**
     * 
     * @type {PageResponse}
     * @memberof ApiResponseListProductResponse
     */
    'pageResponse'?: PageResponse;
}
/**
 * 
 * @export
 * @interface ApiResponseLong
 */
export interface ApiResponseLong {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseLong
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseLong
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof ApiResponseLong
     */
    'data'?: number;
    /**
     * 
     * @type {PageResponse}
     * @memberof ApiResponseLong
     */
    'pageResponse'?: PageResponse;
}
/**
 * 
 * @export
 * @interface ApiResponseProductDetailResponse
 */
export interface ApiResponseProductDetailResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseProductDetailResponse
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseProductDetailResponse
     */
    'message': string;
    /**
     * 
     * @type {ProductDetailResponse}
     * @memberof ApiResponseProductDetailResponse
     */
    'data'?: ProductDetailResponse;
    /**
     * 
     * @type {PageResponse}
     * @memberof ApiResponseProductDetailResponse
     */
    'pageResponse'?: PageResponse;
}
/**
 * 
 * @export
 * @interface GetPreSignedUrlResponse
 */
export interface GetPreSignedUrlResponse {
    /**
     * 
     * @type {string}
     * @memberof GetPreSignedUrlResponse
     */
    'virtualImagePath': string;
    /**
     * 
     * @type {string}
     * @memberof GetPreSignedUrlResponse
     */
    'preSignedUrl': string;
}
/**
 * 
 * @export
 * @interface PageResponse
 */
export interface PageResponse {
    /**
     * 
     * @type {number}
     * @memberof PageResponse
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof PageResponse
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof PageResponse
     */
    'totalPageCount': number;
}
/**
 * 
 * @export
 * @interface ProductColorResponse
 */
export interface ProductColorResponse {
    /**
     * 
     * @type {number}
     * @memberof ProductColorResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ProductColorResponse
     */
    'productId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductColorResponse
     */
    'color': ProductColorResponseColorEnum;
    /**
     * 
     * @type {number}
     * @memberof ProductColorResponse
     */
    'additionalPrice': number;
}

export const ProductColorResponseColorEnum = {
    Gold: 'GOLD',
    RoseGold: 'ROSE_GOLD',
    WhiteGold: 'WHITE_GOLD'
} as const;

export type ProductColorResponseColorEnum = typeof ProductColorResponseColorEnum[keyof typeof ProductColorResponseColorEnum];

/**
 * 
 * @export
 * @interface ProductDetailResponse
 */
export interface ProductDetailResponse {
    /**
     * 
     * @type {ProductResponse}
     * @memberof ProductDetailResponse
     */
    'product': ProductResponse;
    /**
     * 
     * @type {Array<ProductOptionInfoResponse>}
     * @memberof ProductDetailResponse
     */
    'productOptionInfos': Array<ProductOptionInfoResponse>;
}
/**
 * 
 * @export
 * @interface ProductImageResponse
 */
export interface ProductImageResponse {
    /**
     * 
     * @type {number}
     * @memberof ProductImageResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ProductImageResponse
     */
    'productId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductImageResponse
     */
    'imageUrl': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductImageResponse
     */
    'isThumbnail': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductImageResponse
     */
    'thumbnail'?: boolean;
}
/**
 * 
 * @export
 * @interface ProductMaterialResponse
 */
export interface ProductMaterialResponse {
    /**
     * 
     * @type {number}
     * @memberof ProductMaterialResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ProductMaterialResponse
     */
    'productId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductMaterialResponse
     */
    'material': ProductMaterialResponseMaterialEnum;
    /**
     * 
     * @type {number}
     * @memberof ProductMaterialResponse
     */
    'additionalPrice': number;
}

export const ProductMaterialResponseMaterialEnum = {
    K10: 'K10',
    K14: 'K14',
    K18: 'K18',
    K22: 'K22',
    K24: 'K24'
} as const;

export type ProductMaterialResponseMaterialEnum = typeof ProductMaterialResponseMaterialEnum[keyof typeof ProductMaterialResponseMaterialEnum];

/**
 * 
 * @export
 * @interface ProductOptionCategoryResponse
 */
export interface ProductOptionCategoryResponse {
    /**
     * 
     * @type {number}
     * @memberof ProductOptionCategoryResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionCategoryResponse
     */
    'productId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionCategoryResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProductOptionInfoResponse
 */
export interface ProductOptionInfoResponse {
    /**
     * 
     * @type {ProductOptionCategoryResponse}
     * @memberof ProductOptionInfoResponse
     */
    'optionCategory': ProductOptionCategoryResponse;
    /**
     * 
     * @type {Array<ProductOptionResponse>}
     * @memberof ProductOptionInfoResponse
     */
    'options': Array<ProductOptionResponse>;
}
/**
 * 
 * @export
 * @interface ProductOptionResponse
 */
export interface ProductOptionResponse {
    /**
     * 
     * @type {number}
     * @memberof ProductOptionResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionResponse
     */
    'productOptionCategoryId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionResponse
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionResponse
     */
    'additionalPrice': number;
}
/**
 * 
 * @export
 * @interface ProductResponse
 */
export interface ProductResponse {
    /**
     * 
     * @type {number}
     * @memberof ProductResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProductResponse
     */
    'productType': string;
    /**
     * 
     * @type {string}
     * @memberof ProductResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductResponse
     */
    'productCode': string;
    /**
     * 
     * @type {number}
     * @memberof ProductResponse
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof ProductResponse
     */
    'weightByMilliGram': number;
    /**
     * 
     * @type {string}
     * @memberof ProductResponse
     */
    'thumbnailImage'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductResponse
     */
    'isDiamond': boolean;
    /**
     * 
     * @type {number}
     * @memberof ProductResponse
     */
    'totalDiamondCaratX100': number;
    /**
     * 
     * @type {boolean}
     * @memberof ProductResponse
     */
    'isDisplay': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ProductResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface SaveProductRequest
 */
export interface SaveProductRequest {
    /**
     * 
     * @type {string}
     * @memberof SaveProductRequest
     */
    'productType': SaveProductRequestProductTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SaveProductRequest
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof SaveProductRequest
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof SaveProductRequest
     */
    'weightByMilliGram': number;
    /**
     * 
     * @type {boolean}
     * @memberof SaveProductRequest
     */
    'isDiamond': boolean;
    /**
     * 
     * @type {number}
     * @memberof SaveProductRequest
     */
    'totalDiamondCaratX100': number;
    /**
     * 
     * @type {boolean}
     * @memberof SaveProductRequest
     */
    'isDisplay': boolean;
}

export const SaveProductRequestProductTypeEnum = {
    Ring: 'RING',
    Necklace: 'NECKLACE',
    Earring: 'EARRING',
    Bracelet: 'BRACELET',
    Base: 'BASE'
} as const;

export type SaveProductRequestProductTypeEnum = typeof SaveProductRequestProductTypeEnum[keyof typeof SaveProductRequestProductTypeEnum];

/**
 * 
 * @export
 * @interface UpdateProductRequest
 */
export interface UpdateProductRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'productType': UpdateProductRequestProductTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'weightByMilliGram'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateProductRequest
     */
    'isDiamond'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdateProductRequest
     */
    'totalDiamondCaratX100'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateProductRequest
     */
    'isDisplay'?: boolean;
}

export const UpdateProductRequestProductTypeEnum = {
    Ring: 'RING',
    Necklace: 'NECKLACE',
    Earring: 'EARRING',
    Bracelet: 'BRACELET',
    Base: 'BASE'
} as const;

export type UpdateProductRequestProductTypeEnum = typeof UpdateProductRequestProductTypeEnum[keyof typeof UpdateProductRequestProductTypeEnum];

/**
 * 
 * @export
 * @interface UpsertProductColorInternalRequest
 */
export interface UpsertProductColorInternalRequest {
    /**
     * 
     * @type {number}
     * @memberof UpsertProductColorInternalRequest
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductColorInternalRequest
     */
    'color': UpsertProductColorInternalRequestColorEnum;
    /**
     * 
     * @type {number}
     * @memberof UpsertProductColorInternalRequest
     */
    'additionalPrice': number;
}

export const UpsertProductColorInternalRequestColorEnum = {
    Gold: 'GOLD',
    RoseGold: 'ROSE_GOLD',
    WhiteGold: 'WHITE_GOLD'
} as const;

export type UpsertProductColorInternalRequestColorEnum = typeof UpsertProductColorInternalRequestColorEnum[keyof typeof UpsertProductColorInternalRequestColorEnum];

/**
 * 
 * @export
 * @interface UpsertProductColorRequest
 */
export interface UpsertProductColorRequest {
    /**
     * 
     * @type {number}
     * @memberof UpsertProductColorRequest
     */
    'productId': number;
    /**
     * 
     * @type {Array<UpsertProductColorInternalRequest>}
     * @memberof UpsertProductColorRequest
     */
    'upsertProductColorInternalRequests': Array<UpsertProductColorInternalRequest>;
}
/**
 * 
 * @export
 * @interface UpsertProductImageInternalRequest
 */
export interface UpsertProductImageInternalRequest {
    /**
     * 
     * @type {number}
     * @memberof UpsertProductImageInternalRequest
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductImageInternalRequest
     */
    'imageUrl': string;
    /**
     * 
     * @type {boolean}
     * @memberof UpsertProductImageInternalRequest
     */
    'isThumbnail': boolean;
}
/**
 * 
 * @export
 * @interface UpsertProductImageRequest
 */
export interface UpsertProductImageRequest {
    /**
     * 
     * @type {number}
     * @memberof UpsertProductImageRequest
     */
    'productId': number;
    /**
     * 
     * @type {Array<UpsertProductImageInternalRequest>}
     * @memberof UpsertProductImageRequest
     */
    'upsertProductImageInternalRequests': Array<UpsertProductImageInternalRequest>;
}
/**
 * 
 * @export
 * @interface UpsertProductMaterialInternalRequest
 */
export interface UpsertProductMaterialInternalRequest {
    /**
     * 
     * @type {number}
     * @memberof UpsertProductMaterialInternalRequest
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductMaterialInternalRequest
     */
    'material': UpsertProductMaterialInternalRequestMaterialEnum;
    /**
     * 
     * @type {number}
     * @memberof UpsertProductMaterialInternalRequest
     */
    'additionalPrice': number;
}

export const UpsertProductMaterialInternalRequestMaterialEnum = {
    K10: 'K10',
    K14: 'K14',
    K18: 'K18',
    K22: 'K22',
    K24: 'K24'
} as const;

export type UpsertProductMaterialInternalRequestMaterialEnum = typeof UpsertProductMaterialInternalRequestMaterialEnum[keyof typeof UpsertProductMaterialInternalRequestMaterialEnum];

/**
 * 
 * @export
 * @interface UpsertProductMaterialRequest
 */
export interface UpsertProductMaterialRequest {
    /**
     * 
     * @type {number}
     * @memberof UpsertProductMaterialRequest
     */
    'productId': number;
    /**
     * 
     * @type {Array<UpsertProductMaterialInternalRequest>}
     * @memberof UpsertProductMaterialRequest
     */
    'upsertProductMaterialInternalRequest': Array<UpsertProductMaterialInternalRequest>;
}
/**
 * 
 * @export
 * @interface UpsertProductOptionCategoryInternalRequest
 */
export interface UpsertProductOptionCategoryInternalRequest {
    /**
     * 
     * @type {number}
     * @memberof UpsertProductOptionCategoryInternalRequest
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductOptionCategoryInternalRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpsertProductOptionInternalRequest
 */
export interface UpsertProductOptionInternalRequest {
    /**
     * 
     * @type {number}
     * @memberof UpsertProductOptionInternalRequest
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductOptionInternalRequest
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UpsertProductOptionInternalRequest
     */
    'additionalPrice': number;
}
/**
 * 
 * @export
 * @interface UpsertProductOptionRequest
 */
export interface UpsertProductOptionRequest {
    /**
     * 
     * @type {number}
     * @memberof UpsertProductOptionRequest
     */
    'productId': number;
    /**
     * 
     * @type {UpsertProductOptionCategoryInternalRequest}
     * @memberof UpsertProductOptionRequest
     */
    'optionCategory': UpsertProductOptionCategoryInternalRequest;
    /**
     * 
     * @type {Array<UpsertProductOptionInternalRequest>}
     * @memberof UpsertProductOptionRequest
     */
    'options': Array<UpsertProductOptionInternalRequest>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPreSignedUrl: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/api/v1/products/images/pre-signed-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProductColors: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('readProductColors', 'productId', productId)
            const localVarPath = `/admin/api/v1/products/colors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProductDetail: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('readProductDetail', 'productId', productId)
            const localVarPath = `/admin/api/v1/products/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProductImages: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('readProductImages', 'productId', productId)
            const localVarPath = `/admin/api/v1/products/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProductMaterials: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('readProductMaterials', 'productId', productId)
            const localVarPath = `/admin/api/v1/products/materials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReadProductsProductTypeEnum} [productType] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProducts: async (productType?: ReadProductsProductTypeEnum, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (productType !== undefined) {
                localVarQueryParameter['productType'] = productType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SaveProductRequest} saveProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveProduct: async (saveProductRequest: SaveProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saveProductRequest' is not null or undefined
            assertParamExists('saveProduct', 'saveProductRequest', saveProductRequest)
            const localVarPath = `/admin/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProductRequest} updateProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (updateProductRequest: UpdateProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProductRequest' is not null or undefined
            assertParamExists('updateProduct', 'updateProductRequest', updateProductRequest)
            const localVarPath = `/admin/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertProductColorRequest} upsertProductColorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProductColors: async (upsertProductColorRequest: UpsertProductColorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertProductColorRequest' is not null or undefined
            assertParamExists('upsertProductColors', 'upsertProductColorRequest', upsertProductColorRequest)
            const localVarPath = `/admin/api/v1/products/colors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertProductColorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertProductImageRequest} upsertProductImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProductImages: async (upsertProductImageRequest: UpsertProductImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertProductImageRequest' is not null or undefined
            assertParamExists('upsertProductImages', 'upsertProductImageRequest', upsertProductImageRequest)
            const localVarPath = `/admin/api/v1/products/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertProductImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertProductMaterialRequest} upsertProductMaterialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProductMaterials: async (upsertProductMaterialRequest: UpsertProductMaterialRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertProductMaterialRequest' is not null or undefined
            assertParamExists('upsertProductMaterials', 'upsertProductMaterialRequest', upsertProductMaterialRequest)
            const localVarPath = `/admin/api/v1/products/materials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertProductMaterialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertProductOptionRequest} upsertProductOptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProductOptions: async (upsertProductOptionRequest: UpsertProductOptionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertProductOptionRequest' is not null or undefined
            assertParamExists('upsertProductOptions', 'upsertProductOptionRequest', upsertProductOptionRequest)
            const localVarPath = `/admin/api/v1/products/options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertProductOptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPreSignedUrl(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseGetPreSignedUrlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPreSignedUrl(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.createPreSignedUrl']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readProductColors(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListProductColorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readProductColors(productId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.readProductColors']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readProductDetail(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProductDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readProductDetail(productId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.readProductDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readProductImages(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListProductImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readProductImages(productId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.readProductImages']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readProductMaterials(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListProductMaterialResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readProductMaterials(productId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.readProductMaterials']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ReadProductsProductTypeEnum} [productType] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readProducts(productType?: ReadProductsProductTypeEnum, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readProducts(productType, page, size, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.readProducts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {SaveProductRequest} saveProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveProduct(saveProductRequest: SaveProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveProduct(saveProductRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.saveProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateProductRequest} updateProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(updateProductRequest: UpdateProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(updateProductRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.updateProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UpsertProductColorRequest} upsertProductColorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertProductColors(upsertProductColorRequest: UpsertProductColorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertProductColors(upsertProductColorRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.upsertProductColors']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UpsertProductImageRequest} upsertProductImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertProductImages(upsertProductImageRequest: UpsertProductImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertProductImages(upsertProductImageRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.upsertProductImages']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UpsertProductMaterialRequest} upsertProductMaterialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertProductMaterials(upsertProductMaterialRequest: UpsertProductMaterialRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertProductMaterials(upsertProductMaterialRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.upsertProductMaterials']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UpsertProductOptionRequest} upsertProductOptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertProductOptions(upsertProductOptionRequest: UpsertProductOptionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertProductOptions(upsertProductOptionRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.upsertProductOptions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPreSignedUrl(options?: any): AxiosPromise<ApiResponseGetPreSignedUrlResponse> {
            return localVarFp.createPreSignedUrl(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProductColors(productId: number, options?: any): AxiosPromise<ApiResponseListProductColorResponse> {
            return localVarFp.readProductColors(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProductDetail(productId: number, options?: any): AxiosPromise<ApiResponseProductDetailResponse> {
            return localVarFp.readProductDetail(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProductImages(productId: number, options?: any): AxiosPromise<ApiResponseListProductImageResponse> {
            return localVarFp.readProductImages(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProductMaterials(productId: number, options?: any): AxiosPromise<ApiResponseListProductMaterialResponse> {
            return localVarFp.readProductMaterials(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReadProductsProductTypeEnum} [productType] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProducts(productType?: ReadProductsProductTypeEnum, page?: number, size?: number, options?: any): AxiosPromise<ApiResponseListProductResponse> {
            return localVarFp.readProducts(productType, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SaveProductRequest} saveProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveProduct(saveProductRequest: SaveProductRequest, options?: any): AxiosPromise<ApiResponseLong> {
            return localVarFp.saveProduct(saveProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProductRequest} updateProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(updateProductRequest: UpdateProductRequest, options?: any): AxiosPromise<ApiResponseLong> {
            return localVarFp.updateProduct(updateProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpsertProductColorRequest} upsertProductColorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProductColors(upsertProductColorRequest: UpsertProductColorRequest, options?: any): AxiosPromise<ApiResponseListLong> {
            return localVarFp.upsertProductColors(upsertProductColorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpsertProductImageRequest} upsertProductImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProductImages(upsertProductImageRequest: UpsertProductImageRequest, options?: any): AxiosPromise<ApiResponseListLong> {
            return localVarFp.upsertProductImages(upsertProductImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpsertProductMaterialRequest} upsertProductMaterialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProductMaterials(upsertProductMaterialRequest: UpsertProductMaterialRequest, options?: any): AxiosPromise<ApiResponseListLong> {
            return localVarFp.upsertProductMaterials(upsertProductMaterialRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpsertProductOptionRequest} upsertProductOptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertProductOptions(upsertProductOptionRequest: UpsertProductOptionRequest, options?: any): AxiosPromise<ApiResponseLong> {
            return localVarFp.upsertProductOptions(upsertProductOptionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPreSignedUrl(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPreSignedUrl(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readProductColors(productId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readProductColors(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readProductDetail(productId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readProductDetail(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readProductImages(productId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readProductImages(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readProductMaterials(productId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readProductMaterials(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReadProductsProductTypeEnum} [productType] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readProducts(productType?: ReadProductsProductTypeEnum, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readProducts(productType, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SaveProductRequest} saveProductRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveProduct(saveProductRequest: SaveProductRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saveProduct(saveProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProductRequest} updateProductRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateProduct(updateProductRequest: UpdateProductRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateProduct(updateProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpsertProductColorRequest} upsertProductColorRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upsertProductColors(upsertProductColorRequest: UpsertProductColorRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).upsertProductColors(upsertProductColorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpsertProductImageRequest} upsertProductImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upsertProductImages(upsertProductImageRequest: UpsertProductImageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).upsertProductImages(upsertProductImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpsertProductMaterialRequest} upsertProductMaterialRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upsertProductMaterials(upsertProductMaterialRequest: UpsertProductMaterialRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).upsertProductMaterials(upsertProductMaterialRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpsertProductOptionRequest} upsertProductOptionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upsertProductOptions(upsertProductOptionRequest: UpsertProductOptionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).upsertProductOptions(upsertProductOptionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ReadProductsProductTypeEnum = {
    Ring: 'RING',
    Necklace: 'NECKLACE',
    Earring: 'EARRING',
    Bracelet: 'BRACELET',
    Base: 'BASE'
} as const;
export type ReadProductsProductTypeEnum = typeof ReadProductsProductTypeEnum[keyof typeof ReadProductsProductTypeEnum];


